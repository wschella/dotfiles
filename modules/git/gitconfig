[push]
  default = simple

[user]
  email = wout.schellaert@gmail.com
  name = Wout Schellaert

[core]
  autocrlf = input
  eol = lf
  editor = vim
  safecrlf = false
  excludesfile = /home/wout/.gitignore

[pull]
  rebase = true

[push]
  default = current

[color]
  ui = auto

[alias]
  r = rebase
  rcont = rebase --continue
  br = branch
  ci = commit
  co = checkout 
  cp = cherry-pick
  st = status -s
  s = status -s

  a  = add -A .
  aa = add -A :/

  today = diff @{yesterday}.. --stat # see what we did today
  last  = log -1 HEAD
  diffc = diff --cached
  diffh = diff HEAD

  ciam = commit -am

  amen  = commit --amend --no-edit
  amena = commit --amend --no-edit --all
  
  back = reset HEAD~
  unstage = reset HEAD -- .
  unstagea = reset HEAD :/

  assume   = update-index --assume-unchanged    # Assume a file as unchanged
  unassume = update-index --no-assume-unchanged # Unassume a file
  assumed  = "!git ls-files -v | grep ^h | cut -c 3-"  # List assumed files
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"

  # Get the current branch name (used in other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

  # Push to (pull from) remote, and track
  pushup = "!git push -u origin $(git branch-name)"
  pullup = "!git branch --set-upstream-to origin/$(git branch-name); git pull"  

  logr = log --reverse -n 10
  # Graphic logtree
  tree = "!git logr --graph --oneline --decorate --all -r"
  # Pretty one line log with relative dates
  l = "!git logr --pretty=format:'%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate --date=relative"
  # Pretty one line log with absolute dates
  la = "!git logr --pretty=format:'%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate --date=short"
  # Simple one line log
  ls = "!git logr --pretty=format:'%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate" 
  # Default short log
  lss = "!git logr --oneline --decorate"
  # Pretty log with files changed (extended) 
  le = "!git logr --pretty=format:'%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]' --decorate --numstat"

  pr = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  pr-clean = "!git checkout master ; git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
[init]
	defaultBranch = master
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[safe]
	directory = /media/wout/Data/Workspace/Prutsing/data-vacuum
	directory = /media/wout/Data/Workspace/Prutsing/shapeshitter
	directory = /media/wout/Data/Workspace/Prutsing/site
	directory = /media/wout/Data/Workspace/Prutsing/brier
	directory = /media/wout/Data/PhD/Projects/Varia
	directory = /media/wout/Data/PhD/Projects/procgen-companion
	directory = /media/wout/Data/PhD/External Repos/AnimalAI_Affordances
	directory = /media/wout/Data/PhD/Projects/pisa
	directory = /media/wout/Data/PhD/External Repos/AnimalAI_Affordances_Control
	directory = /media/wout/Data/PhD/Code/procgen-companion
	directory = /media/wout/Data/PhD/Code/procgen-companion/.venv/src/mypy
	directory = /media/wout/Data/PhD/Code/_External/AnimalAI_Affordances
	directory = /media/wout/Data/PhD/Code/pisa
	directory = /media/wout/Data/PhD/Code/_Varia
	directory = /media/wout/Data/PhD/Code/primo
	directory = /media/wout/Data/Workspace/Prutsing/alien/external/vcpkg
	directory = /media/wout/Data/Workspace/Prutsing/alien